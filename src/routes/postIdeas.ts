import express from 'express';
import { v4 as uuidv4 } from 'uuid';
import { DatabaseService } from '../services/DatabaseService';
import { AIService } from '../services/AIService';

const router = express.Router();

let databaseService: DatabaseService;
let aiService: AIService;

export const setServices = (dbService: DatabaseService, ai: AIService) => {
  databaseService = dbService;
  aiService = ai;
};

// GET /api/post-ideas - Get post ideas
router.get('/', async (req, res) => {
  try {
    const approved = req.query.approved === 'true' ? true : 
                     req.query.approved === 'false' ? false : undefined;
    
    const postIdeas = await databaseService.getPostIdeas(approved);
    
    res.json({
      success: true,
      data: postIdeas
    });
  } catch (error) {
    console.error('Error fetching post ideas:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch post ideas'
    });
  }
});

// POST /api/post-ideas/analyze - Analyze a new post idea
router.post('/analyze', async (req, res) => {
  try {
    const { content } = req.body;
    
    if (!content || typeof content !== 'string' || content.trim().length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Content is required and must be a non-empty string'
      });
    }

    if (!aiService.isAvailable()) {
      return res.status(503).json({
        success: false,
        error: 'AI service is not available'
      });
    }

    const analysis = await aiService.analyzePostIdea(content.trim());
    
    const postIdea = {
      id: uuidv4(),
      content: content.trim(),
      score: analysis.score,
      category: analysis.category,
      aiAnalysis: analysis.analysis,
      approved: analysis.approved,
      createdAt: new Date(),
      scheduledFor: null
    };

    await databaseService.savePostIdea(postIdea);
    
    res.json({
      success: true,
      data: {
        ...postIdea,
        suggestions: analysis.suggestions
      }
    });
  } catch (error) {
    console.error('Error analyzing post idea:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to analyze post idea'
    });
  }
});

// POST /api/post-ideas/generate - Generate new post ideas
router.post('/generate', async (req, res) => {
  try {
    const { topic, count = 5 } = req.body;
    
    if (!topic || typeof topic !== 'string' || topic.trim().length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Topic is required and must be a non-empty string'
      });
    }

    if (!aiService.isAvailable()) {
      return res.status(503).json({
        success: false,
        error: 'AI service is not available'
      });
    }

    const ideas = await aiService.generatePostIdeas(topic.trim(), Math.min(count, 10));
    
    const savedIdeas = [];
    
    for (const idea of ideas) {
      const postIdea = {
        id: uuidv4(),
        content: idea.content,
        score: idea.estimatedEngagement === 'high' ? 8 : 
               idea.estimatedEngagement === 'medium' ? 6 : 4,
        category: idea.category || 'general',
        aiAnalysis: idea.reasoning || 'Generated by AI',
        approved: false,
        createdAt: new Date(),
        scheduledFor: null
      };

      await databaseService.savePostIdea(postIdea);
      savedIdeas.push({
        ...postIdea,
        hashtags: idea.hashtags || []
      });
    }
    
    res.json({
      success: true,
      data: savedIdeas,
      message: `Generated ${savedIdeas.length} post ideas for topic: ${topic}`
    });
  } catch (error) {
    console.error('Error generating post ideas:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to generate post ideas'
    });
  }
});

// PUT /api/post-ideas/:id/approve - Approve a post idea
router.put('/:id/approve', async (req, res) => {
  try {
    const { id } = req.params;
    
    await databaseService.run(
      'UPDATE post_ideas SET approved = TRUE WHERE id = ?',
      [id]
    );
    
    res.json({
      success: true,
      message: 'Post idea approved'
    });
  } catch (error) {
    console.error('Error approving post idea:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to approve post idea'
    });
  }
});

// PUT /api/post-ideas/:id/reject - Reject a post idea
router.put('/:id/reject', async (req, res) => {
  try {
    const { id } = req.params;
    
    await databaseService.run(
      'UPDATE post_ideas SET approved = FALSE WHERE id = ?',
      [id]
    );
    
    res.json({
      success: true,
      message: 'Post idea rejected'
    });
  } catch (error) {
    console.error('Error rejecting post idea:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to reject post idea'
    });
  }
});

// DELETE /api/post-ideas/:id - Delete a post idea
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    await databaseService.run(
      'DELETE FROM post_ideas WHERE id = ?',
      [id]
    );
    
    res.json({
      success: true,
      message: 'Post idea deleted'
    });
  } catch (error) {
    console.error('Error deleting post idea:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to delete post idea'
    });
  }
});

// PUT /api/post-ideas/:id/schedule - Schedule a post idea
router.put('/:id/schedule', async (req, res) => {
  try {
    const { id } = req.params;
    const { scheduledFor } = req.body;
    
    if (!scheduledFor) {
      return res.status(400).json({
        success: false,
        error: 'scheduledFor date is required'
      });
    }

    await databaseService.run(
      'UPDATE post_ideas SET scheduled_for = ? WHERE id = ?',
      [scheduledFor, id]
    );
    
    res.json({
      success: true,
      message: 'Post idea scheduled'
    });
  } catch (error) {
    console.error('Error scheduling post idea:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to schedule post idea'
    });
  }
});

export default router;
